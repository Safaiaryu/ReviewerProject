@model IEnumerable<ReviewerProject.Models.Material>

@{
    ViewBag.Title = "ListMaterials";
}
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>Materials</title>

    <!-- core CSS -->
    <link href="~/Content/bootstrap.min.css" rel="stylesheet">
    <link href="~/Content/font-awesome.min.css" rel="stylesheet">
    <link href="~/Content/animate.min.css" rel="stylesheet">
    <link href="~/Content/prettyPhoto.css" rel="stylesheet">
    <link href="~/Content/main.css" rel="stylesheet">
    <link href="~/Content/responsive.css" rel="stylesheet">
</head><!--/head-->
<br />
<br />
<br />
<h2>Materials</h2>

<br />
<div class="container">
    <img src="~/Content/Images/Materials.jpg" alt="Eidolon" class="floatLeft bodyImg" />
    <p>
        While your out exploring you will see 'examine' spots all over the place. These
        are areas where you can find materials to craft new equipment. These items can 
        also be used to upgrade already made equipment. Vast amounts are needed in a vast
        variety to be able to craft the many pieces of gear that you can get in the game. 
        Make sure to never pass one by when you can help it. It can take many run throughs of
        a quest to get enough of a single material. 
    </p>
</div>

<br />
<br />


<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.MaterialName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Type)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.MaterialName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Description)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Type)
        </td>
    </tr>
}

</table>
